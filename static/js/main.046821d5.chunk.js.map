{"version":3,"sources":["BarChart.tsx","App.tsx","reportWebVitals.ts","index.tsx","BarChart.module.css"],"names":["BarChart","data","useState","renderToggle","plotAreaWidth","setPlotAreaWidth","tickWidth","setTickWidth","yAxisWidth","setYAxisWidth","svgRoot","useRef","xAxisElement","yAxisElement","plotAreaElement","xScale","useMemo","scalePoint","yScale","scaleLinear","xAxis","axisBottom","yAxis","axisLeft","current","getBoundingClientRect","width","height","xOrigin","range","useLayoutEffect","domain","Array","length","fill","map","d","i","result","yExtent","extent","Number","isFinite","Math","min","select","call","getBBox","tickLabelFrequency","ceil","tickFormat","toString","selectAll","attr","useEffect","callback","value","window","addEventListener","removeEventListener","className","styles","chart","ref","transform","rect","x","y","abs","App","setData","getValue","random","addDataHandle","setInterval","resetDataHandle","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.046821d5.chunk.js","sourcesContent":["import React, {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  axisBottom,\n  axisLeft,\n  extent,\n  scaleLinear,\n  scalePoint,\n  select,\n} from \"d3\";\n\nimport styles from \"./BarChart.module.css\";\n\n// Hard coding the x axis height - without line breaks, this\n// is probably ok\nconst X_AXIS_HEIGHT = 30;\n\nconst validateExtent = (\n  result: [undefined, undefined] | [number, number]\n): result is [number, number] =>\n  Number.isFinite(result[0]) && Number.isFinite(result[1]);\n\ninterface Props {\n  data: number[];\n}\n\nconst BarChart: React.FC<Props> = ({ data }) => {\n  const [, renderToggle] = useState(false);\n\n  const [plotAreaWidth, setPlotAreaWidth] = useState(0);\n  const [tickWidth, setTickWidth] = useState(0);\n  const [yAxisWidth, setYAxisWidth] = useState(0);\n\n  const svgRoot = useRef<SVGSVGElement | null>(null);\n  const xAxisElement = useRef<SVGGElement | null>(null);\n  const yAxisElement = useRef<SVGGElement | null>(null);\n  const plotAreaElement = useRef<SVGGElement | null>(null);\n\n  const xScale = useMemo(() => scalePoint<number>(), []);\n  const yScale = useMemo(() => scaleLinear(), []);\n  const xAxis = useMemo(() => axisBottom(xScale), [xScale]);\n  const yAxis = useMemo(() => axisLeft(yScale), [yScale]);\n\n  const { width, height } = svgRoot.current?.getBoundingClientRect() ?? {\n    width: 0,\n    height: 0,\n  };\n  const xOrigin = yScale(0);\n\n  xScale.range([0, plotAreaWidth]);\n\n  // Update scales as required\n  useLayoutEffect(() => {\n    xScale.domain(\n      Array(data.length + 1)\n        .fill(0)\n        .map((d, i) => i)\n    );\n\n    const yExtent = extent(data);\n    if (validateExtent(yExtent)) {\n      yScale.domain([Math.min(0, yExtent[0]), yExtent[1]]);\n    }\n  }, [data, xScale, yScale, xAxis, yAxis]);\n\n  useLayoutEffect(() => {\n    if (\n      !svgRoot.current ||\n      !xAxisElement.current ||\n      !yAxisElement.current ||\n      !plotAreaElement.current\n    ) {\n      return;\n    }\n\n    yScale.range([height - X_AXIS_HEIGHT, 0]);\n\n    // Render the Y axis, measure it, and resize the X axis accordingly\n    select(yAxisElement.current).call(yAxis);\n    const yAxisWidth = yAxisElement.current.getBBox().width;\n    const plotAreaWidth = width - yAxisWidth;\n    const tickWidth = plotAreaWidth / (data.length || 1);\n\n    // Reduce the number of tick labels to 1 per 100px\n    const tickLabelFrequency = tickWidth < 100 ? Math.ceil(100 / tickWidth) : 1;\n    xAxis.tickFormat((d, i) =>\n      i % tickLabelFrequency === 0 ? i.toString() : \"\"\n    );\n\n    select(xAxisElement.current)\n      .call(xAxis)\n      .selectAll(\".tick text\")\n      .attr(\"transform\", `translate(${tickWidth / 2} 0)`);\n\n    // Update react state, triggers re-render if different.\n    setYAxisWidth(yAxisWidth);\n    setPlotAreaWidth(plotAreaWidth);\n    setTickWidth(tickWidth);\n  }, [width, height, yScale, yAxis, xScale, xAxis, data]);\n\n  useEffect(() => {\n    // Update state to trigger a re-render on resize. Will be a better way\n    // to handle this, but it's a POC\n    const callback = () => renderToggle((value) => !value);\n\n    window.addEventListener(\"resize\", callback);\n\n    return () => window.removeEventListener(\"resize\", callback);\n  }, []);\n\n  return (\n    <svg className={styles.chart} ref={svgRoot} width={width} height={height}>\n      <g\n        className=\"plot-area\"\n        ref={plotAreaElement}\n        transform={`translate(${yAxisWidth} 0)`}\n      >\n        {data.map((d, i) => (\n          <rect\n            key={i}\n            className={styles.rect}\n            width={tickWidth}\n            x={xScale(i)}\n            y={d < 0 ? xOrigin : yScale(d)}\n            height={Math.abs(xOrigin - yScale(d))}\n          />\n        ))}\n      </g>\n      <g\n        className=\"x-axis\"\n        ref={xAxisElement}\n        transform={`translate(${yAxisWidth} ${xOrigin})`}\n      />\n      <g\n        className=\"y-axis\"\n        ref={yAxisElement}\n        transform={`translate(${yAxisWidth} 0)`}\n      />\n    </svg>\n  );\n};\n\nexport default BarChart;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport BarChart from \"./BarChart\";\n\nfunction App() {\n  const [data, setData] = useState<number[]>([]);\n\n  useEffect(() => {\n    const getValue = () => -500 + Math.random() * 2000;\n    const addDataHandle = window.setInterval(\n      () => setData((data) => [...data, getValue()]),\n      200\n    );\n    const resetDataHandle = window.setInterval(\n      () => setData(Array(25).fill(0).map(getValue)),\n      30000\n    );\n\n    return () => {\n      window.clearInterval(addDataHandle);\n      window.clearInterval(resetDataHandle);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <BarChart data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chart\":\"BarChart_chart__2ktnG\",\"rect\":\"BarChart_rect__2qLwt\"};"],"sourceRoot":""}